// module d_cache_write_back (
//     input wire clk, rst,
//     //mips core
//     input         cpu_data_req     ,    //ï¿½Ç·ï¿½ï¿½Ç¶ï¿½Ð´ï¿½ï¿½ï¿½ï¿½
//     input         cpu_data_wr      ,    //ï¿½ï¿½Ç°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð´ï¿½ï¿½ï¿½ï¿½
//     input  [1 :0] cpu_data_size    ,
//     input  [31:0] cpu_data_addr    ,    //cpuï¿½á¹©ï¿½Äµï¿½Ö·
//     input  [31:0] cpu_data_wdata   ,    //cpuÐ´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
//     output [31:0] cpu_data_rdata   ,    //Cacheï¿½ï¿½ï¿½Ø¸ï¿½mipsï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
//     output        cpu_data_addr_ok ,    //Cacheï¿½É¹ï¿½ï¿½ï¿½ï¿½Øµï¿½Ö·ï¿½ï¿½mips
//     output        cpu_data_data_ok ,    //Cacheï¿½É¹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ý¸ï¿½mips

//     //axi interface
//     output         cache_data_req     , //cacheï¿½ï¿½ï¿½ÍµÄ¶ï¿½Ð´ï¿½ï¿½ï¿½ï¿½
//     output         cache_data_wr      , //cacheï¿½ï¿½ï¿½Íµï¿½Ð´ï¿½ï¿½ï¿½ï¿½
//     output  [1 :0] cache_data_size    ,
//     output  [31:0] cache_data_addr    ,  //ï¿½ï¿½ï¿½ï¿½Äµï¿½ï¿½?
//     output  [31:0] cache_data_wdata   ,  //Ð´ï¿½ï¿½ï¿½ï¿½Ú´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
//     input   [31:0] cache_data_rdata   ,     //ï¿½Ú´æ·µï¿½Ø¸ï¿½cacheï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
//     input          cache_data_addr_ok ,    //ï¿½ï¿½ï¿½Ú´ï¿½ï¿½Ð·ï¿½ï¿½Ø£ï¿½ï¿½Ç·ï¿½É¹ï¿½ï¿½Õµï¿½ï¿½ï¿½ï¿½ï¿??
//     input          cache_data_data_ok      //ï¿½ï¿½ï¿½Ú´ï¿½ï¿½Ð·ï¿½ï¿½Ø£ï¿½ï¿½ï¿½ï¿½ï¿½Ç¶ï¿½ï¿½ï¿½ï¿½ó£¬±ï¿½Ê¾ï¿½Ó·ï¿½ï¿½ï¿½cache ï¿½ï¿½ï¿½ï¿½ï¿½Ý£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð´ï¿½ï¿½ï¿½ó£¬´ï¿½ï¿½ï¿½Ð´ï¿½ï¿½ï¿½ï¿½ï¿½Ý³É¹ï¿½ï¿½ï¿??


// );
//     //Cacheï¿½ï¿½ï¿½ï¿½
//     parameter  INDEX_WIDTH  = 10, OFFSET_WIDTH = 2;  //Ö¸ï¿½ï¿½indexÎª10Î»ï¿½ï¿½offset2Î»
//     localparam TAG_WIDTH    = 32 - INDEX_WIDTH - OFFSET_WIDTH; //tag20Î»
//     localparam CACHE_DEEPTH = 1 << INDEX_WIDTH;  //cash ï¿½ï¿½ï¿½ï¿½ï¿?? 1024
    
//     //Cacheï¿½æ´¢ï¿½ï¿½Ôª
//     reg                 cache_valid [CACHE_DEEPTH - 1 : 0]; //ï¿½ï¿½Ð§Î»
//     reg                 cache_dirty [CACHE_DEEPTH - 1 : 0]; //ï¿½ï¿½Ê¾ï¿½Ç·ï¿½ï¿½ï¿½ï¿½ï¿½Î»
//     reg [TAG_WIDTH-1:0] cache_tag   [CACHE_DEEPTH - 1 : 0]; //tag
  
//     reg [31:0]          cache_block [CACHE_DEEPTH - 1 : 0];//Ò»ï¿½ï¿½ï¿½Ö£ï¿½32Î»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½

//     //ï¿½ï¿½ï¿½Êµï¿½Ö·ï¿½Ö½ï¿½
//     wire [OFFSET_WIDTH-1:0] offset;
//     wire [INDEX_WIDTH-1:0] index;
//     wire [TAG_WIDTH-1:0] tag;
    
//     assign offset = cpu_data_addr[OFFSET_WIDTH - 1 : 0];
//     assign index = cpu_data_addr[INDEX_WIDTH + OFFSET_WIDTH - 1 : OFFSET_WIDTH];
//     assign tag = cpu_data_addr[31 : INDEX_WIDTH + OFFSET_WIDTH];

//     //ï¿½ï¿½ï¿½ï¿½Cache line
//     wire c_valid;
//     wire c_dirty; // ï¿½Ç·ï¿½ï¿½Þ¸Ä¹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿??
//     wire [TAG_WIDTH-1:0] c_tag;
//     wire [31:0] c_block;

//     assign c_valid = cache_valid[index];
//     assign c_dirty = cache_dirty[index]; // ï¿½Ç·ï¿½ï¿½Þ¸Ä¹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿??
//     assign c_tag   = cache_tag  [index];
//     assign c_block = cache_block[index];

//     //ï¿½Ð¶ï¿½ï¿½Ç·ï¿½ï¿½ï¿½ï¿½ï¿½
//     wire hit, miss;
//     assign hit = c_valid & (c_tag == tag);  //cache lineï¿½ï¿½validÎ»Îª1ï¿½ï¿½ï¿½ï¿½tagï¿½ï¿½ï¿½Ö·ï¿½ï¿½tagï¿½ï¿½ï¿??
//     assign miss = ~hit;

//     //cpuï¿½ï¿½ï¿½ï¿½ï¿½Ç²ï¿½ï¿½Ç¶ï¿½ï¿½ï¿½Ð´ï¿½ï¿½ï¿½ï¿½
//     wire read, write;
//     assign write = cpu_data_wr;
//     assign read = cpu_data_req & ~write; // ï¿½Ç¶ï¿½Ð´ï¿½ï¿½ï¿½ï¿½ï¿½Ò²ï¿½ï¿½ï¿½Ð´ï¿½ï¿½ï¿½ï¿½

//     //cacheï¿½ï¿½Ç°Î»ï¿½ï¿½ï¿½Ç·ï¿½dirty
//     wire dirty, clean;
//     assign dirty = c_dirty;
//     assign clean = ~dirty;

//     //×´Ì¬×ªï¿½Æ±ä»¯
//     parameter IDLE = 2'b00, RM = 2'b01, WM = 2'b11;
//     reg [1:0] state;
//     //ï¿½ï¿½ï¿½ï¿½ï¿½Ç·ï¿½ï¿½Ú¶ï¿½ï¿½Ú´ï¿½×´Ì¬ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½1ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½ï¿½Ú»Ö¸ï¿½ï¿½ï¿½ï¿½Í±ï¿½ï¿½ï¿½Åºï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð¶ï¿½ï¿½Ç·ï¿½ï¿½Ç´Ó¶ï¿½ï¿½Ú´ï¿½×´Ì¬ï¿½Øµï¿½ï¿½ï¿½ï¿½ï¿½×´ï¿½?
//     reg in_RM;
    
//     //×´Ì¬×ªï¿½ï¿½
//     always @(posedge clk) begin
//         if(rst) begin
//             state <= IDLE;
//             in_RM <= 1'b0;
//         end
//         else begin
//             case(state)
//                 IDLE:   begin            //ï¿½ï¿½Ç°Î»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½IDLE×´Ì¬ï¿½ï¿½ï¿½ï¿½ï¿½Ã»ï¿½ï¿½ï¿½Ð£ï¿½ï¿½Ð¶ï¿½ï¿½Ç·ï¿½Îªï¿½ï¿½Î»ï¿½ï¿½ï¿½ï¿½Ç°Î»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð´ï¿½Ú´ï¿½×´Ì¬ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ú´ï¿½×´ï¿½?
//                         state <= cpu_data_req & hit ? IDLE :
//                                  cpu_data_req & miss & dirty  ? WM :
//                                  cpu_data_req & miss & clean  ? RM : IDLE;
//                         in_RM <= 1'b0;
//                         end
//                 RM:     begin
//                         state <= cache_data_data_ok ? IDLE : RM;          //ï¿½ï¿½ï¿½Ú´ï¿½ï¿½ï¿½ï¿½Øµï¿½IDLE
//                         in_RM <= 1'b1;
//                         end
//                 WM:     state <= cache_data_data_ok ? RM : WM;              //Ð´ï¿½Ú´ï¿½ï¿½ï¿½ï¿½Øµï¿½RMï¿½ï¿½ï¿½Ú´ï¿½×´Ì¬
//             endcase
//         end
//     end

//     //ï¿½ï¿½ï¿½Ú´ï¿½
//     //isRM, addr_rcv, read_finishï¿½ï¿½ï¿½Ú¹ï¿½ï¿½ï¿½ï¿½ï¿½sramï¿½Åºï¿½
//     wire read_req;      //1ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä¶ï¿½ï¿½ï¿½ï¿½ñ£¬´Ó·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½óµ½½ï¿½ï¿½ï¿½
//     reg addr_rcv;       //ï¿½ï¿½Ö·ï¿½ï¿½ï¿½Õ³É¹ï¿½(addr_ok)ï¿½óµ½½ï¿½ï¿½ï¿½  
//     wire read_finish;   //ï¿½ï¿½ï¿½Ý½ï¿½ï¿½Õ³É¹ï¿½(data_ok)ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿??
//     always @(posedge clk) begin
//         addr_rcv <= rst ? 1'b0 :          //ï¿½ï¿½ï¿½ï¿½ï¿½Ú¶ï¿½ï¿½Ú´ï¿½×´Ì¬ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ú´ï¿½Ä¶ï¿½Ð´ï¿½ï¿½ï¿½ó£¬²ï¿½ï¿½ï¿½ï¿½Ú´ï¿½É¹ï¿½ï¿½Õµï¿½ï¿½ï¿½Ö·Ê±ï¿½ï¿½ï¿½ï¿½1
//                     read_req & cache_data_req & cache_data_addr_ok ? 1'b1 :
//                     read_finish ? 1'b0 : addr_rcv;
//     end
//     assign read_req = state==RM;
//     assign read_finish = read_req & cache_data_data_ok;

//     //Ð´ï¿½Ú´ï¿½
//     wire write_req;     
//     reg waddr_rcv;      
//     wire write_finish;   
//     always @(posedge clk) begin
//         //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð´ï¿½Ú´ï¿½×´Ì¬ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ú´ï¿½Ä¶ï¿½Ð´ï¿½ï¿½ï¿½ó£¬²ï¿½ï¿½ï¿½ï¿½Ú´ï¿½É¹ï¿½ï¿½Õµï¿½ï¿½ï¿½Ö·Ê±ï¿½ï¿½ï¿½ï¿½1
//         waddr_rcv <= rst ? 1'b0 :
//                      write_req & cache_data_req & cache_data_addr_ok ? 1'b1 :
//                      write_finish ? 1'b0 : waddr_rcv;
//     end
//     assign write_req = state==WM;
//     assign write_finish = write_req & cache_data_data_ok;

//     //output to mips core
//     assign cpu_data_rdata   = hit ? c_block : cache_data_rdata;    //cacheï¿½É¹ï¿½ï¿½ï¿½ï¿½Øµï¿½Ö·ï¿½ï¿½ï¿½ï¿½ï¿½Ý¸ï¿½mips
//     assign cpu_data_addr_ok = cpu_data_req & hit | cache_data_req & cache_data_addr_ok & read_req;  //ï¿½ï¿½cpuï¿½Ð¶ï¿½Ð´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Òªï¿½ï¿½ï¿½Ú´æ²¢ï¿½ï¿½ï¿½Ú´ï¿½ï¿½Õµï¿½ï¿½ï¿½Ö·Ê±ï¿½ï¿½ï¿½ï¿½cpuï¿½ï¿½ï¿½ï¿½É¹ï¿½È¡ï¿½ï¿½ï¿½Ëµï¿½ï¿½?
//     assign cpu_data_data_ok = cpu_data_req & hit | cache_data_data_ok & read_req; //ï¿½ï¿½ï¿½ï¿½ï¿½Ð£ï¿½ï¿½ï¿½ï¿½ß¶ï¿½ï¿½Ú´ï¿½Ê±ï¿½Ú´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ý£ï¿½ï¿½ï¿½cpuï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ý¾ï¿½Î»
    
//     //output to axi interface
//     assign cache_data_req   = read_req & ~addr_rcv | write_req & ~waddr_rcv;
//     assign cache_data_wr    = write_req;   //ï¿½ï¿½ï¿½Ú´ï¿½ï¿½ï¿½Ð´ï¿½ï¿½ï¿½ï¿½
//     assign cache_data_size  = cpu_data_size;
//     assign cache_data_addr  = cache_data_wr ? {c_tag, index, offset} : cpu_data_addr;  //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð´ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½Ñµï¿½Ç°ï¿½ï¿½Ö·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ö·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ú´æ£¬ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½mipsï¿½ï¿½ï¿½ï¿½Äµï¿½Ö·ï¿½ï¿½ï¿½ï¿½ï¿½Ú´ï¿??
//     assign cache_data_wdata = c_block;     //Ð´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ö»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿??


//     //Ð´ï¿½ï¿½Cache
//     //ï¿½ï¿½ï¿½ï¿½ï¿½Ö·ï¿½Ðµï¿½tag indexï¿½ï¿½
//     reg [TAG_WIDTH-1:0] tag_save;
//     reg [INDEX_WIDTH-1:0] index_save;
//     always @(posedge clk) begin
//         tag_save   <= rst ? 0 :
//                       cpu_data_req ? tag : tag_save;
//         index_save <= rst ? 0 :
//                       cpu_data_req ? index : index_save;
//     end

//     wire [31:0] write_cache_data;
//     wire [3:0] write_mask;

//     //ï¿½ï¿½ï¿½Ýµï¿½Ö·ï¿½ï¿½ï¿½ï¿½Î»ï¿½ï¿½sizeï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð´ï¿½ï¿½ï¿½ë£¨ï¿½ï¿½ï¿½sbï¿½ï¿½shï¿½È²ï¿½ï¿½ï¿½Ð´ï¿½ï¿½ï¿½ï¿½1ï¿½ï¿½ï¿½Öµï¿½Ö¸ï¿½î£©4Î»ï¿½ï¿½Ó¦1ï¿½ï¿½ï¿½Ö£ï¿½4ï¿½Ö½Ú£ï¿½ï¿½ï¿½Ã¿ï¿½ï¿½ï¿½Öµï¿½Ð´Ê¹ï¿½ï¿½
//     assign write_mask = cpu_data_size==2'b00 ?
//                             (cpu_data_addr[1] ? (cpu_data_addr[0] ? 4'b1000 : 4'b0100):
//                                                 (cpu_data_addr[0] ? 4'b0010 : 4'b0001)) :
//                             (cpu_data_size==2'b01 ? (cpu_data_addr[1] ? 4'b1100 : 4'b0011) : 4'b1111);

//     //ï¿½ï¿½ï¿½ï¿½ï¿½Ê¹ï¿½Ã£ï¿½Î»ï¿½?1ï¿½Ä´ï¿½ï¿½ï¿½ï¿½ï¿½Òªï¿½ï¿½ï¿½Âµï¿½
//     //Î»ï¿½ï¿½Õ¹ï¿½ï¿½{8{1'b1}} -> 8'b11111111

//     assign write_cache_data = cache_block[index] & ~{{8{write_mask[3]}}, {8{write_mask[2]}}, {8{write_mask[1]}}, {8{write_mask[0]}}} | 
//                               cpu_data_wdata & {{8{write_mask[3]}}, {8{write_mask[2]}}, {8{write_mask[1]}}, {8{write_mask[0]}}};


//     //ï¿½ï¿½Ç°ï¿½Ç·ï¿½ï¿½Ú¿ï¿½ï¿½ï¿½×´Ì¬
//     wire isIDLE = state==IDLE;
//     integer t;
//     always @(posedge clk) begin
//         if(rst) begin
//              for(t=0; t<CACHE_DEEPTH; t=t+1) begin   //ï¿½Õ¿ï¿½Ê¼ï¿½ï¿½Cacheï¿½ï¿½Îªï¿½ï¿½Ð§
//                  cache_valid[t] <= 0;
//                  cache_dirty[t] <= 0;  //ï¿½ï¿½Ê¼ï¿½ï¿½dirtyÎª0
//              end
//            // cache_valid <= '{default: '0};
//            // cache_dirty <= '{default: '0};
            
//         end
//         else begin
//             if(read_finish) begin //ï¿½ï¿½ï¿½Ú´ï¿½ï¿½ï¿½ï¿½ï¿½ó£¬½ï¿½ï¿½ï¿½ï¿½Ý·ï¿½ï¿½ï¿½cache
//                 cache_valid[index_save] <= 1'b1;             //ï¿½ï¿½Cache lineï¿½ï¿½Îªï¿½ï¿½Ð§
//                 cache_dirty[index_save] <= 1'b0; // ï¿½ï¿½ï¿½Ú´ï¿½ï¿½È¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½clean
//                 cache_tag  [index_save] <= tag_save;
//                 cache_block[index_save] <= cache_data_rdata; //Ð´ï¿½ï¿½Cache line
//             end
//             //Ð´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½cacheï¿½Ðµï¿½ï¿½ï¿½ï¿½Ý½ï¿½ï¿½ï¿½ï¿½Þ¸ï¿½
//             //ï¿½ï¿½Ð´ï¿½ï¿½ï¿½Ð²ï¿½ï¿½Ò»Øµï¿½ï¿½ï¿½ï¿½ï¿½×´Ì¬Ê±ï¿½ï¿½ï¿½ï¿½write & isIDLE & hit
//             //ï¿½ï¿½Ð´È±Ê§ï¿½ï¿½ï¿½Ò´Ó¶ï¿½ï¿½Ú´ï¿½×´Ì¬ï¿½Øµï¿½ï¿½ï¿½ï¿½ï¿½×´Ì¬write & isIDLE & in_RM
//             //in_RMï¿½ï¿½ï¿½ï¿½1ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½ï¿½Ú»Ö¸ï¿½ï¿½ï¿½in_RMï¿½ï¿½isIDLEï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¿ï¿½ï¿½ï¿½ï¿½Ð¶ï¿½ï¿½Ç·ï¿½ï¿½Ç´Ó¶ï¿½×´Ì¬ï¿½Øµï¿½ï¿½ï¿½ï¿½ï¿½×´Ì¬
//             else if(write & isIDLE & (hit | in_RM)) begin   
//                 cache_dirty[index] <= 1'b1; // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ý£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Þ¸ï¿½dirty
//                 cache_block[index] <= write_cache_data;      //Ð´ï¿½ï¿½Cache lineï¿½ï¿½Ê¹ï¿½ï¿½indexï¿½ï¿½ï¿½ï¿½ï¿½ï¿½index_save
//             end
//         end
//     end
// endmodule




module d_cache_write_back (
    input wire clk, rst,
    //mips core
    input         cpu_data_req     ,
    input         cpu_data_wr      ,
    input  [1 :0] cpu_data_size    ,
    input  [31:0] cpu_data_addr    ,
    input  [31:0] cpu_data_wdata   ,
    output [31:0] cpu_data_rdata   ,
    output        cpu_data_addr_ok ,
    output        cpu_data_data_ok ,

    //axi interface
    output         cache_data_req     ,
    output         cache_data_wr      ,
    output  [1 :0] cache_data_size    ,
    output  [31:0] cache_data_addr    ,
    output  [31:0] cache_data_wdata   ,
    input   [31:0] cache_data_rdata   ,
    input          cache_data_addr_ok ,
    input          cache_data_data_ok 
    
);
    //Cacheéç½®
    parameter  INDEX_WIDTH  = 10, OFFSET_WIDTH = 2;
    localparam TAG_WIDTH    = 32 - INDEX_WIDTH - OFFSET_WIDTH;
    localparam CACHE_DEEPTH = 1 << INDEX_WIDTH;
    
    //Cacheå­å¨åå
    reg                 cache_valid [CACHE_DEEPTH - 1 : 0];
    reg [TAG_WIDTH-1:0] cache_tag   [CACHE_DEEPTH - 1 : 0];
    reg [31:0]          cache_block [CACHE_DEEPTH - 1 : 0];
    reg                 cache_dirty [CACHE_DEEPTH - 1 : 0];//å¨åç´è¾¾åºç¡ä¸å¢æ·»èä½è®°å½?

    //è®¿é®å°ååè§£
    wire [OFFSET_WIDTH-1:0] offset;
    wire [INDEX_WIDTH-1:0] index;
    wire [TAG_WIDTH-1:0] tag;
    
    assign offset = cpu_data_addr[OFFSET_WIDTH - 1 : 0];
    assign index = cpu_data_addr[INDEX_WIDTH + OFFSET_WIDTH - 1 : OFFSET_WIDTH];
    assign tag = cpu_data_addr[31 : INDEX_WIDTH + OFFSET_WIDTH];

    //è®¿é®Cache line
    wire c_valid;
    wire [TAG_WIDTH-1:0] c_tag;
    wire [31:0] c_block;
    wire c_dirty;

    assign c_valid = cache_valid[index];
    assign c_tag   = cache_tag  [index];
    assign c_block = cache_block[index];
    assign c_dirty = cache_dirty[index];

    //å¤æ­æ¯å¦å½ä¸­
    wire hit, miss;
    assign hit = c_valid & (c_tag == tag);  //cache lineçvalidä½ä¸º1ï¼ä¸tagä¸å°å?ä¸­tagç¸ç­
    assign miss = ~hit;

    //è¯»æå?
    wire read, write;
    assign write = cpu_data_wr;
    assign read = ~write;

    //æ ¹æ®åå+ååéç­ç¥è®¾è®¡FSM
    parameter IDLE = 2'b00, RM = 2'b01, WM = 2'b11;
    reg [1:0] state;
    always @(posedge clk) begin
        if(rst) begin
            state <= IDLE;
        end
        else begin
            case(state)
                IDLE:   state <= cpu_data_req & read & miss & c_dirty? WM :
                                 cpu_data_req & read & miss & ~c_dirty? RM :
                                 cpu_data_req & write & miss & c_dirty? WM :
                                 cpu_data_req & write & miss & ~c_dirty? RM : IDLE;
                RM:     state <= cache_data_data_ok ? IDLE : RM;
                WM:     state <= cache_data_data_ok ? RM : WM;
            endcase
        end
    end

    //è¯»åå­?
    //åéread_req, addr_rcv, read_finishç¨äºæé? ç±»sramä¿¡å·ã?
    wire read_req;      //ä¸?æ¬¡å®æ´çè¯»äºå¡ï¼ä»ååºè¯»è¯·æ±å°ç»æ?
    reg addr_rcv;       //å°åæ¥æ¶æå(addr_ok)åå°ç»æ
    wire read_finish;   //æ°æ®æ¥æ¶æå(data_ok)ï¼å³è¯»è¯·æ±ç»æ?
    always @(posedge clk) begin
        addr_rcv <= rst ? 1'b0 :
                    read_req & cache_data_req & cache_data_addr_ok ? 1'b1 :
                    read_finish ? 1'b0 : addr_rcv;
    end
    assign read_req = state==RM;
    assign read_finish = read_req & cache_data_data_ok;

    //ååå­?
    wire write_req;     
    reg waddr_rcv;      
    wire write_finish;   
    always @(posedge clk) begin
        waddr_rcv <= rst ? 1'b0 :
                     write_req & cache_data_req & cache_data_addr_ok ? 1'b1 :
                     write_finish ? 1'b0 : waddr_rcv;
    end
    assign write_req = state==WM;
    assign write_finish = write_req & cache_data_data_ok;

    //output to mips core
    assign cpu_data_rdata   = hit ? c_block : cache_data_rdata;
    //å¨ååç­ç¥ä¸ï¼å¦æè¯·æ±çè®¿é®å½ä¸­ï¼åcacheç´æ¥è¿åæ°æ®/åæ°æ®ï¼
    //å¦æè¯·æ±çè®¿é®ç¼ºå¤±ï¼åæ è®ºè¯¥åæ¯å¦ä¸ºèåï¼é½é?è¦ç­å°cacheä»åå­ä¸­è¯»åºæ°æ®åï¼æè½å©ç¨cpuååºçæ°æ®è®¿é®å°å?å¨cacheä¸­å¯¹æ°æ®è¿è¡è¯»åæä½
    assign cpu_data_addr_ok = cpu_data_req & hit | cache_data_req & read_req &cache_data_addr_ok;
    assign cpu_data_data_ok = cpu_data_req & hit | read_req & cache_data_data_ok;

    //output to axi interface
    assign cache_data_req   = read_req & ~addr_rcv | write_req & ~waddr_rcv;
    assign cache_data_wr    = write_req;
    assign cache_data_size  = cpu_data_size;
    //å¨ååç­ç¥ä¸ï¼å¦æéè¦ååå­ï¼åååçå°å?ä¸?å®æ¯cache lineä¸­çå°åï¼å¦ææ¯é?è¦è¯»åå­ï¼åæ¯ç´æ¥é?è¿cpuçè¯·æ±æ°æ®å°å?æ¥è¯»ååå­?
    assign cache_data_addr  = cache_data_wr ? {c_tag, index, offset} : cpu_data_addr;
    //å¨ååç­ç¥ä¸ï¼ä»å½è®¿é®ç¼ºå¤±ä¸âèåâ?æ¶ï¼æé?è¦åååå­ï¼å æ­¤åååå­çæ°æ®ä¸å®æ¯cache lineä¸­çæ°æ®
    assign cache_data_wdata = c_block;

    //åå¥Cache
    //ä¿å­å°åä¸­çtag, indexï¼é²æ­¢addråçæ¹å
    reg [TAG_WIDTH-1:0] tag_save;
    reg [INDEX_WIDTH-1:0] index_save;
    always @(posedge clk) begin
        tag_save   <= rst ? 0 :
                      cpu_data_req ? tag : tag_save;
        index_save <= rst ? 0 :
                      cpu_data_req ? index : index_save;
    end

    wire [31:0] write_cache_data;
    wire [3:0] write_mask;

    //æ ¹æ®å°åä½ä¸¤ä½åsizeï¼çæåæ©ç ï¼éå¯¹sbï¼shç­ä¸æ¯åå®æ´ä¸?ä¸ªå­çæä»¤ï¼ï¼?4ä½å¯¹åº?1ä¸ªå­ï¼?4å­èï¼ä¸­æ¯ä¸ªå­çåä½¿è?
    assign write_mask = cpu_data_size==2'b00 ?
                            (cpu_data_addr[1] ? (cpu_data_addr[0] ? 4'b1000 : 4'b0100):
                                                (cpu_data_addr[0] ? 4'b0010 : 4'b0001)) :
                            (cpu_data_size==2'b01 ? (cpu_data_addr[1] ? 4'b1100 : 4'b0011) : 4'b1111);

    //æ©ç çä½¿ç¨ï¼ä½ä¸º1çä»£è¡¨éè¦æ´æ°çã?
    //ä½æå±ï¼{8{1'b1}} -> 8'b11111111
    //new_data = old_data & ~mask | write_data & mask
    assign write_cache_data = cache_block[index] & ~{{8{write_mask[3]}}, {8{write_mask[2]}}, {8{write_mask[1]}}, {8{write_mask[0]}}} | 
                              cpu_data_wdata & {{8{write_mask[3]}}, {8{write_mask[2]}}, {8{write_mask[1]}}, {8{write_mask[0]}}};

    integer t;
    always @(posedge clk) begin
        if(rst) begin
             for(t=0; t<CACHE_DEEPTH; t=t+1) begin   //åå¼å§å°Cacheç½®ä¸ºæ æä¸å¹²å?
                 cache_valid[t] <= 0;
                 cache_dirty[t] <= 0;
             end

            //cache_valid <= '{default: '0};
            //cache_dirty <= '{default: '0};
        end
        else begin
            if(read_finish) begin //è¯»ç¼ºå¤±ï¼è®¿å­ç»ææ?
                cache_valid[index_save] <= 1'b1;             //å°Cache lineç½®ä¸ºææ
                cache_tag  [index_save] <= tag_save;
                cache_block[index_save] <= cache_data_rdata; //åå¥Cache line
                cache_dirty[index_save] <= 1'b0;//åä»åå­è¯»åå°cacheçæ°æ®ä¸å®æ¯å¹²åç?
            end
            else if(write & hit) begin   //åå½ä¸­æ¶é?è¦åCache
                cache_block[index] <= write_cache_data;      //åå¥Cache lineï¼ä½¿ç¨indexèä¸æ¯index_save
                cache_dirty[index] <= 1'b1;
            end
        end
    end
endmodule